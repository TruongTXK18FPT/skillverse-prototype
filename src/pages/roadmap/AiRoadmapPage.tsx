import { useState, useEffect, useCallback } from 'react';
import { ArrowLeft, Plus, Search, Grid3x3, List, Filter } from 'lucide-react';
import { RoadmapGeneratorForm } from '../../components/ai-roadmap';
import { RoadmapList } from '../../components/roadmap';
import aiRoadmapService from '../../services/aiRoadmapService';
import { 
  RoadmapSessionSummary, 
  GenerateRoadmapRequest
} from '../../types/Roadmap';
import MeowlGuide from '../../components/MeowlGuide';
import Toast from '../../components/Toast';
import { useToast } from '../../hooks/useToast';
import { useAuth } from '../../context/AuthContext';
import { useNavigate } from 'react-router-dom';
import '../../styles/RoadmapPage.css';
import '../../styles/AiRoadmap.css';

type ViewMode = 'list' | 'generate';
type DisplayMode = 'grid' | 'list';
type SortOption = 'newest' | 'oldest' | 'progress' | 'title';

const AiRoadmapPage = () => {
  const [viewMode, setViewMode] = useState<ViewMode>('list');
  const [roadmaps, setRoadmaps] = useState<RoadmapSessionSummary[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [isLoadingList, setIsLoadingList] = useState(true);
  const { toast, isVisible, showError, showSuccess, hideToast } = useToast();
  const { isAuthenticated } = useAuth();
  const navigate = useNavigate();

  // Phase 4: List view enhancements
  const [searchQuery, setSearchQuery] = useState('');
  const [displayMode, setDisplayMode] = useState<DisplayMode>('grid');
  const [sortBy, setSortBy] = useState<SortOption>('newest');
  const [filterExperience, setFilterExperience] = useState<string>('all');

  const loadUserRoadmaps = useCallback(async () => {
    // Only load if authenticated to prevent 401 errors
    if (!isAuthenticated) {
      setIsLoadingList(false);
      return;
    }

    try {
      setIsLoadingList(true);
      const data = await aiRoadmapService.getUserRoadmaps();
      setRoadmaps(data);
    } catch (error) {
      showError('Error', (error as Error).message);
    } finally {
      setIsLoadingList(false);
    }
  }, [isAuthenticated, showError]);

  // Load user's roadmaps on mount (only if authenticated)
  useEffect(() => {
    loadUserRoadmaps();
  }, [loadUserRoadmaps]);

  const handleCreateRoadmap = () => {
    // Always allow viewing the form, but show login prompt if not authenticated
    setViewMode('generate');
  };

  const handleGenerate = async (request: GenerateRoadmapRequest) => {
    if (!isAuthenticated) {
      showError('Y√™u c·∫ßu ƒëƒÉng nh·∫≠p', 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ t·∫°o l·ªô tr√¨nh h·ªçc t·∫≠p.');
      setTimeout(() => navigate('/login'), 1500);
      return;
    }

    try {
      setIsLoading(true);
      const roadmap = await aiRoadmapService.generateRoadmap(request);
      showSuccess('Success', 'Roadmap generated successfully!');
      // Navigate to the new roadmap detail page
      navigate(`/roadmap/${roadmap.sessionId}`);
      // Reload list to include new roadmap
      await loadUserRoadmaps();
    } catch (error: any) {
      // Extract error message from Axios error response
      const errorMessage = error?.response?.data?.message || error?.message || 'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh.';
      
      // Debug logging
      console.log('üêõ Error caught:', error);
      console.log('üêõ Error response:', error?.response);
      console.log('üêõ Error message extracted:', errorMessage);
      
      // Check for specific error types and show user-friendly messages
      if (errorMessage.includes('M·ª•c ti√™u kh√¥ng h·ª£p l·ªá') || 
          errorMessage.includes('kh√¥ng li√™n quan ƒë·∫øn h·ªçc t·∫≠p') ||
          errorMessage.includes('kh√¥ng h·ª£p l√Ω')) {
        // Show detailed validation error with examples
        console.log('üö® Showing invalid goal error toast');
        showError(
          '‚ùå M·ª•c ti√™u kh√¥ng h·ª£p l·ªá', 
          'M·ª•c ti√™u c·ªßa b·∫°n kh√¥ng li√™n quan ƒë·∫øn h·ªçc t·∫≠p ho·∫∑c ph√°t tri·ªÉn k·ªπ nƒÉng. Vui l√≤ng nh·∫≠p m·ªôt m·ª•c ti√™u h·ªçc t·∫≠p c·ª• th·ªÉ nh∆∞ "H·ªçc Python", "Tr·ªü th√†nh Data Scientist", "H·ªçc ti·∫øng Anh IELTS 7.0", v.v.',
          12 // 12 seconds for longer message
        );
      } else if (errorMessage.includes('qu√° d√†i') || errorMessage.includes('qu√° ng·∫Øn')) {
        console.log('üö® Showing length error toast');
        showError('‚ö†Ô∏è ƒê·ªô d√†i kh√¥ng h·ª£p l·ªá', errorMessage, 8);
      } else if (errorMessage.includes('ch·ª©a t·ª´ ng·ªØ kh√¥ng ph√π h·ª£p')) {
        console.log('üö® Showing inappropriate content error toast');
        showError('üö´ N·ªôi dung kh√¥ng ph√π h·ª£p', 'M·ª•c ti√™u ch·ª©a t·ª´ ng·ªØ kh√¥ng ph√π h·ª£p. Vui l√≤ng nh·∫≠p l·∫°i v·ªõi n·ªôi dung t√≠ch c·ª±c.', 8);
      } else {
        // Generic error - show backend message directly
        console.log('üö® Showing generic error toast');
        showError('‚ùå L·ªói t·∫°o l·ªô tr√¨nh', errorMessage, 8);
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleSelectRoadmap = (sessionId: number) => {
    if (!isAuthenticated) {
      showError('Y√™u c·∫ßu ƒëƒÉng nh·∫≠p', 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem l·ªô tr√¨nh.');
      setTimeout(() => navigate('/login'), 1500);
      return;
    }

    // Navigate to dedicated roadmap detail page
    navigate(`/roadmap/${sessionId}`);
  };


  // Filter and sort roadmaps (V2 API field names)
  const filteredAndSortedRoadmaps = useCallback(() => {
    let filtered = [...roadmaps];

    // Search filter (use V2 field names: originalGoal)
    if (searchQuery.trim()) {
      const query = searchQuery.toLowerCase();
      filtered = filtered.filter(r =>
        r.title.toLowerCase().includes(query) ||
        r.originalGoal.toLowerCase().includes(query)
      );
    }

    // Experience filter (use V2 field name: experienceLevel)
    if (filterExperience !== 'all') {
      filtered = filtered.filter(r => r.experienceLevel.toLowerCase() === filterExperience.toLowerCase());
    }

    // Sort
    filtered.sort((a, b) => {
      switch (sortBy) {
        case 'newest':
          return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();
        case 'oldest':
          return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();
        case 'progress':
          return b.progressPercentage - a.progressPercentage;
        case 'title':
          return a.title.localeCompare(b.title);
        default:
          return 0;
      }
    });

    return filtered;
  }, [roadmaps, searchQuery, filterExperience, sortBy]);

  const handleGoBack = () => {
    if (viewMode === 'generate') {
      setViewMode('list');
    } else {
      window.history.back();
    }
  };
  return (
    <div className="roadmap-page__galaxy-bg">

      {/* Cosmic dust particles - Optimized for performance */}
      <div className="cosmic-dust">
        {[...Array(40)].map((_, i) => (
          <div 
            key={i} 
            className="dust-particle"
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
              animationDelay: `${Math.random() * 10}s`,
              animationDuration: `${20 + Math.random() * 15}s`
            }}
          />
        ))}
      </div>
      <div className="roadmap-page__container">
        {/* Header */}
        <div className="roadmap-page__header">
          <button onClick={handleGoBack} className="roadmap-page__back-btn">
            <ArrowLeft className="h-5 w-5" />
            {viewMode === 'list' ? 'Quay l·∫°i' : 'Quay l·∫°i L·ªô tr√¨nh'}
          </button>
          
          <div className="roadmap-page__header-content">
            <h1 className="roadmap-page__title">
              {viewMode === 'list' && 'L·ªô tr√¨nh h·ªçc b·∫±ng AI'}
              {viewMode === 'generate' && 'T·∫°o l·ªô tr√¨nh m·ªõi'}
            </h1>
            <p className="roadmap-page__subtitle">
              {viewMode === 'list' && 'L·ªô tr√¨nh h·ªçc c√° nh√¢n h√≥a, ƒë∆∞·ª£c t·∫°o b·ªüi AI'}
              {viewMode === 'generate' && 'H√£y ƒë·ªÉ AI t·∫°o h√†nh tr√¨nh h·ªçc t·∫≠p ph√π h·ª£p v·ªõi b·∫°n'}
            </p>
          </div>

          {/* Create Button - Only show in list view */}
          {viewMode === 'list' && (
            <button
              onClick={handleCreateRoadmap}
              className="roadmap-page__create-btn"
            >
              <Plus size={20} />
              T·∫°o l·ªô tr√¨nh m·ªõi
            </button>
          )}
        </div>

        {/* Content */}
        <div className="roadmap-page__content">
          {/* LIST VIEW - Show all roadmaps */}
          {viewMode === 'list' && (
            <div className="roadmap-page__list">
              {/* Search and Filter Controls */}
              {roadmaps.length > 0 && (
                <div className="sv-roadmap-controls">
                  <div className="sv-roadmap-controls__search">
                    <Search size={20} />
                    <input
                      type="text"
                      placeholder="T√¨m ki·∫øm l·ªô tr√¨nh..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      className="sv-roadmap-controls__input"
                    />
                  </div>

                  <div className="sv-roadmap-controls__filters">
                    <div className="sv-roadmap-controls__group">
                      <Filter size={18} />
                      <select
                        value={filterExperience}
                        onChange={(e) => setFilterExperience(e.target.value)}
                        className="sv-roadmap-controls__select"
                      >
                        <option value="all">T·∫•t c·∫£ c·∫•p ƒë·ªô</option>
                        <option value="beginner">M·ªõi b·∫Øt ƒë·∫ßu</option>
                        <option value="intermediate">Trung c·∫•p</option>
                        <option value="advanced">N√¢ng cao</option>
                      </select>
                    </div>

                    <div className="sv-roadmap-controls__group">
                      <span className="sv-roadmap-controls__label">S·∫Øp x·∫øp:</span>
                      <select
                        value={sortBy}
                        onChange={(e) => setSortBy(e.target.value as SortOption)}
                        className="sv-roadmap-controls__select"
                      >
                        <option value="newest">M·ªõi nh·∫•t</option>
                        <option value="oldest">C≈© nh·∫•t</option>
                        <option value="progress">Ti·∫øn ƒë·ªô</option>
                        <option value="title">Ti√™u ƒë·ªÅ (A-Z)</option>
                      </select>
                    </div>

                    <button
                      onClick={() => setDisplayMode(displayMode === 'grid' ? 'list' : 'grid')}
                      className="sv-roadmap-controls__view-toggle"
                      title={displayMode === 'grid' ? 'Ch·∫ø ƒë·ªô danh s√°ch' : 'Ch·∫ø ƒë·ªô l∆∞·ªõi'}
                    >
                      {displayMode === 'grid' ? <List size={20} /> : <Grid3x3 size={20} />}
                    </button>
                  </div>
                </div>
              )}

              <RoadmapList
                roadmaps={filteredAndSortedRoadmaps()}
                displayMode={displayMode}
                onSelectRoadmap={handleSelectRoadmap}
                isLoading={isLoadingList}
                isAuthenticated={isAuthenticated}
                onLoginRedirect={() => navigate('/login')}
                onCreateRoadmap={handleCreateRoadmap}
              />
            </div>
          )}

          {/* GENERATE VIEW - Show form */}
          {viewMode === 'generate' && (
            <RoadmapGeneratorForm
              onGenerate={handleGenerate}
              isLoading={isLoading}
              isAuthenticated={isAuthenticated}
              onLoginRedirect={() => navigate('/login')}
            />
          )}

        </div>
      </div>

      {/* Meowl Guide */}
      <MeowlGuide currentPage="roadmap" />

      {/* Toast Notification */}
      {toast && (
        <Toast
          type={toast.type}
          title={toast.title}
          message={toast.message}
          isVisible={isVisible}
          onClose={hideToast}
          autoCloseDelay={toast.autoCloseDelay}
          showCountdown={toast.showCountdown}
          countdownText={toast.countdownText}
          actionButton={toast.actionButton}
        />
      )}
    </div>
  );
};

export default AiRoadmapPage;
