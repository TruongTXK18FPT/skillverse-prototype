import { useState, useEffect, useCallback } from 'react';
import { ArrowLeft, Plus, Sparkles, Loader, BookOpen, Search, Grid3x3, List, Filter, LogIn } from 'lucide-react';
import { RoadmapGeneratorForm, RoadmapFlow } from '../../components/ai-roadmap';
import aiRoadmapService from '../../services/aiRoadmapService';
import { 
  RoadmapSessionSummary, 
  RoadmapResponse, 
  GenerateRoadmapRequest,
  QuestProgress,
  ProgressStatus
} from '../../types/Roadmap';
import MeowlGuide from '../../components/MeowlGuide';
import Toast from '../../components/Toast';
import { useToast } from '../../hooks/useToast';
import { useAuth } from '../../context/AuthContext';
import { useNavigate } from 'react-router-dom';
import '../../styles/RoadmapPage.css';
import '../../styles/AiRoadmap.css';

type ViewMode = 'list' | 'generate' | 'view';
type DisplayMode = 'grid' | 'list';
type SortOption = 'newest' | 'oldest' | 'progress' | 'title';

const RoadmapPage = () => {
  const [viewMode, setViewMode] = useState<ViewMode>('list');
  const [roadmaps, setRoadmaps] = useState<RoadmapSessionSummary[]>([]);
  const [selectedRoadmap, setSelectedRoadmap] = useState<RoadmapResponse | null>(null);
  const [progressMap, setProgressMap] = useState<Map<string, QuestProgress>>(new Map());
  const [isLoading, setIsLoading] = useState(false);
  const [isLoadingList, setIsLoadingList] = useState(true);
  const { toast, isVisible, showError, showSuccess, hideToast } = useToast();
  const { isAuthenticated } = useAuth();
  const navigate = useNavigate();

  // Phase 4: List view enhancements
  const [searchQuery, setSearchQuery] = useState('');
  const [displayMode, setDisplayMode] = useState<DisplayMode>('grid');
  const [sortBy, setSortBy] = useState<SortOption>('newest');
  const [filterExperience, setFilterExperience] = useState<string>('all');

  const loadUserRoadmaps = useCallback(async () => {
    // Only load if authenticated to prevent 401 errors
    if (!isAuthenticated) {
      setIsLoadingList(false);
      return;
    }

    try {
      setIsLoadingList(true);
      const data = await aiRoadmapService.getUserRoadmaps();
      setRoadmaps(data);
    } catch (error) {
      showError('Error', (error as Error).message);
    } finally {
      setIsLoadingList(false);
    }
  }, [isAuthenticated, showError]);

  // Load user's roadmaps on mount (only if authenticated)
  useEffect(() => {
    loadUserRoadmaps();
  }, [loadUserRoadmaps]);

  const handleCreateRoadmap = () => {
    // Always allow viewing the form, but show login prompt if not authenticated
    setViewMode('generate');
  };

  const handleGenerate = async (request: GenerateRoadmapRequest) => {
    if (!isAuthenticated) {
      showError('Y√™u c·∫ßu ƒëƒÉng nh·∫≠p', 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ t·∫°o l·ªô tr√¨nh h·ªçc t·∫≠p.');
      setTimeout(() => navigate('/login'), 1500);
      return;
    }

    try {
      setIsLoading(true);
      const roadmap = await aiRoadmapService.generateRoadmap(request);
      showSuccess('Success', 'Roadmap generated successfully!');
      setSelectedRoadmap(roadmap);
      setViewMode('view');
      // Reload list to include new roadmap
      await loadUserRoadmaps();
    } catch (error: any) {
      // Extract error message from Axios error response
      const errorMessage = error?.response?.data?.message || error?.message || 'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh.';
      
      // Debug logging
      console.log('üêõ Error caught:', error);
      console.log('üêõ Error response:', error?.response);
      console.log('üêõ Error message extracted:', errorMessage);
      
      // Check for specific error types and show user-friendly messages
      if (errorMessage.includes('M·ª•c ti√™u kh√¥ng h·ª£p l·ªá') || 
          errorMessage.includes('kh√¥ng li√™n quan ƒë·∫øn h·ªçc t·∫≠p') ||
          errorMessage.includes('kh√¥ng h·ª£p l√Ω')) {
        // Show detailed validation error with examples
        console.log('üö® Showing invalid goal error toast');
        showError(
          '‚ùå M·ª•c ti√™u kh√¥ng h·ª£p l·ªá', 
          'M·ª•c ti√™u c·ªßa b·∫°n kh√¥ng li√™n quan ƒë·∫øn h·ªçc t·∫≠p ho·∫∑c ph√°t tri·ªÉn k·ªπ nƒÉng. Vui l√≤ng nh·∫≠p m·ªôt m·ª•c ti√™u h·ªçc t·∫≠p c·ª• th·ªÉ nh∆∞ "H·ªçc Python", "Tr·ªü th√†nh Data Scientist", "H·ªçc ti·∫øng Anh IELTS 7.0", v.v.',
          12 // 12 seconds for longer message
        );
      } else if (errorMessage.includes('qu√° d√†i') || errorMessage.includes('qu√° ng·∫Øn')) {
        console.log('üö® Showing length error toast');
        showError('‚ö†Ô∏è ƒê·ªô d√†i kh√¥ng h·ª£p l·ªá', errorMessage, 8);
      } else if (errorMessage.includes('ch·ª©a t·ª´ ng·ªØ kh√¥ng ph√π h·ª£p')) {
        console.log('üö® Showing inappropriate content error toast');
        showError('üö´ N·ªôi dung kh√¥ng ph√π h·ª£p', 'M·ª•c ti√™u ch·ª©a t·ª´ ng·ªØ kh√¥ng ph√π h·ª£p. Vui l√≤ng nh·∫≠p l·∫°i v·ªõi n·ªôi dung t√≠ch c·ª±c.', 8);
      } else {
        // Generic error - show backend message directly
        console.log('üö® Showing generic error toast');
        showError('‚ùå L·ªói t·∫°o l·ªô tr√¨nh', errorMessage, 8);
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleSelectRoadmap = async (sessionId: number) => {
    if (!isAuthenticated) {
      showError('Y√™u c·∫ßu ƒëƒÉng nh·∫≠p', 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem l·ªô tr√¨nh.');
      setTimeout(() => navigate('/login'), 1500);
      return;
    }

    try {
      setIsLoading(true);
      const roadmap = await aiRoadmapService.getRoadmapById(sessionId);
      setSelectedRoadmap(roadmap);
      setViewMode('view');
    } catch (error) {
      showError('Error', (error as Error).message);
    } finally {
      setIsLoading(false);
    }
  };

  const handleQuestComplete = async (questId: string, completed: boolean) => {
    if (!selectedRoadmap) return;
    
    try {
      // Update backend first
      const response = await aiRoadmapService.updateQuestProgress(
        selectedRoadmap.sessionId, 
        questId, 
        completed
      );

      // Update local state with new progress
      const newProgress = new Map(progressMap);
      if (completed) {
        newProgress.set(questId, {
          questId,
          status: ProgressStatus.COMPLETED,
          progress: 100,
          completedAt: new Date().toISOString()
        });
      } else {
        newProgress.delete(questId);
      }
      setProgressMap(newProgress);

      // Show progress stats
      const { completedQuests, totalQuests, completionPercentage } = response.stats;
      if (completed) {
        showSuccess(
          'Quest Completed! üéâ', 
          `${completedQuests}/${totalQuests} quests done (${completionPercentage.toFixed(1)}%)`
        );
      } else {
        showSuccess(
          'Quest Unchecked', 
          `${completedQuests}/${totalQuests} quests done (${completionPercentage.toFixed(1)}%)`
        );
      }

      // Reload roadmap list to update progress display
      await loadUserRoadmaps();
    } catch (error) {
      showError('Error', (error as Error).message);
    }
  };

  // Filter and sort roadmaps (V2 API field names)
  const filteredAndSortedRoadmaps = useCallback(() => {
    let filtered = [...roadmaps];

    // Search filter (use V2 field names: originalGoal)
    if (searchQuery.trim()) {
      const query = searchQuery.toLowerCase();
      filtered = filtered.filter(r =>
        r.title.toLowerCase().includes(query) ||
        r.originalGoal.toLowerCase().includes(query)
      );
    }

    // Experience filter (use V2 field name: experienceLevel)
    if (filterExperience !== 'all') {
      filtered = filtered.filter(r => r.experienceLevel.toLowerCase() === filterExperience.toLowerCase());
    }

    // Sort
    filtered.sort((a, b) => {
      switch (sortBy) {
        case 'newest':
          return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();
        case 'oldest':
          return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();
        case 'progress':
          return b.progressPercentage - a.progressPercentage;
        case 'title':
          return a.title.localeCompare(b.title);
        default:
          return 0;
      }
    });

    return filtered;
  }, [roadmaps, searchQuery, filterExperience, sortBy]);

  const handleGoBack = () => {
    if (viewMode === 'view' || viewMode === 'generate') {
      setViewMode('list');
      setSelectedRoadmap(null);
    } else {
      window.history.back();
    }
  };
  return (
    <div className="roadmap-page__galaxy-bg">

      {/* Cosmic dust particles */}
      <div className="cosmic-dust">
        {[...Array(30)].map((_, i) => (
          <div 
            key={i} 
            className="dust-particle"
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
              animationDelay: `${Math.random() * 10}s`,
              animationDuration: `${15 + Math.random() * 10}s`
            }}
          />
        ))}
      </div>
      <div className="roadmap-page__container">
        {/* Header */}
        <div className="roadmap-page__header">
          <button onClick={handleGoBack} className="roadmap-page__back-btn">
            <ArrowLeft className="h-5 w-5" />
            {viewMode === 'list' ? 'Quay l·∫°i' : 'Quay l·∫°i L·ªô tr√¨nh'}
          </button>
          
          <div className="roadmap-page__header-content">
            <h1 className="roadmap-page__title">
              {viewMode === 'list' && 'L·ªô tr√¨nh h·ªçc b·∫±ng AI'}
              {viewMode === 'generate' && 'T·∫°o l·ªô tr√¨nh m·ªõi'}
              {viewMode === 'view' && selectedRoadmap?.metadata?.title}
            </h1>
            <p className="roadmap-page__subtitle">
              {viewMode === 'list' && 'L·ªô tr√¨nh h·ªçc c√° nh√¢n h√≥a, ƒë∆∞·ª£c t·∫°o b·ªüi AI'}
              {viewMode === 'generate' && 'H√£y ƒë·ªÉ AI t·∫°o h√†nh tr√¨nh h·ªçc t·∫≠p ph√π h·ª£p v·ªõi b·∫°n'}
              {viewMode === 'view' && selectedRoadmap?.metadata && `${selectedRoadmap.metadata.duration} ‚Ä¢ C·∫•p ƒë·ªô ${selectedRoadmap.metadata.experienceLevel}`}
            </p>
          </div>

          {/* Create Button - Only show in list view */}
          {viewMode === 'list' && (
            <button
              onClick={handleCreateRoadmap}
              className="roadmap-page__create-btn"
            >
              <Plus size={20} />
              T·∫°o l·ªô tr√¨nh m·ªõi
            </button>
          )}
        </div>

        {/* Content */}
        <div className="roadmap-page__content">
          {/* LIST VIEW - Show all roadmaps */}
          {viewMode === 'list' && (
            <div className="roadmap-page__list">
              {/* Search and Filter Controls */}
              {roadmaps.length > 0 && (
                <div className="sv-roadmap-controls">
                  <div className="sv-roadmap-controls__search">
                    <Search size={20} />
                    <input
                      type="text"
                      placeholder="T√¨m ki·∫øm l·ªô tr√¨nh..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      className="sv-roadmap-controls__input"
                    />
                  </div>

                  <div className="sv-roadmap-controls__filters">
                    <div className="sv-roadmap-controls__group">
                      <Filter size={18} />
                      <select
                        value={filterExperience}
                        onChange={(e) => setFilterExperience(e.target.value)}
                        className="sv-roadmap-controls__select"
                      >
                        <option value="all">T·∫•t c·∫£ c·∫•p ƒë·ªô</option>
                        <option value="beginner">M·ªõi b·∫Øt ƒë·∫ßu</option>
                        <option value="intermediate">Trung c·∫•p</option>
                        <option value="advanced">N√¢ng cao</option>
                      </select>
                    </div>

                    <div className="sv-roadmap-controls__group">
                      <span className="sv-roadmap-controls__label">S·∫Øp x·∫øp:</span>
                      <select
                        value={sortBy}
                        onChange={(e) => setSortBy(e.target.value as SortOption)}
                        className="sv-roadmap-controls__select"
                      >
                        <option value="newest">M·ªõi nh·∫•t</option>
                        <option value="oldest">C≈© nh·∫•t</option>
                        <option value="progress">Ti·∫øn ƒë·ªô</option>
                        <option value="title">Ti√™u ƒë·ªÅ (A-Z)</option>
                      </select>
                    </div>

                    <button
                      onClick={() => setDisplayMode(displayMode === 'grid' ? 'list' : 'grid')}
                      className="sv-roadmap-controls__view-toggle"
                      title={displayMode === 'grid' ? 'Ch·∫ø ƒë·ªô danh s√°ch' : 'Ch·∫ø ƒë·ªô l∆∞·ªõi'}
                    >
                      {displayMode === 'grid' ? <List size={20} /> : <Grid3x3 size={20} />}
                    </button>
                  </div>
                </div>
              )}

              {isLoadingList ? (
                <div className="roadmap-page__loading">
                  <Loader className="animate-spin" size={48} />
                  <p>ƒêang t·∫£i l·ªô tr√¨nh c·ªßa b·∫°n...</p>
                </div>
              ) : roadmaps.length === 0 ? (
                <div className="roadmap-page__empty">
                  <div className="roadmap-empty__icon">
                    <BookOpen className="h-12 w-12" />
                  </div>
                  {!isAuthenticated ? (
                    <>
                      <h3>Vui l√≤ng ƒëƒÉng nh·∫≠p</h3>
                      <p>ƒêƒÉng nh·∫≠p ƒë·ªÉ t·∫°o v√† qu·∫£n l√Ω l·ªô tr√¨nh h·ªçc c·ªßa b·∫°n!</p>
                      <button 
                        onClick={() => navigate('/login')}
                        className="roadmap-empty__create-btn"
                        style={{ 
                          background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
                          boxShadow: '0 4px 12px rgba(16, 185, 129, 0.3)'
                        }}
                      >
                        <LogIn size={20} />
                        ƒêƒÉng nh·∫≠p ngay
                      </button>
                    </>
                  ) : (
                    <>
                      <h3>Ch∆∞a c√≥ l·ªô tr√¨nh n√†o</h3>
                      <p>T·∫°o l·ªô tr√¨nh h·ªçc ƒë·∫ßu ti√™n b·∫±ng AI ƒë·ªÉ b·∫Øt ƒë·∫ßu nh√©!</p>
                      <button 
                        onClick={handleCreateRoadmap}
                        className="roadmap-empty__create-btn"
                      >
                        <Sparkles size={20} />
                        T·∫°o l·ªô tr√¨nh ƒë·∫ßu ti√™n
                      </button>
                    </>
                  )}
                </div>
              ) : (
                <div className={`roadmap-page__grid ${displayMode === 'list' ? 'roadmap-page__grid--list' : ''}`}>
                  {filteredAndSortedRoadmaps().map((roadmap) => (
                    <button
                      key={roadmap.sessionId}
                      className="sv-roadmap-card"
                      type="button"
                      onClick={() => handleSelectRoadmap(roadmap.sessionId)}
                      onKeyDown={(e) => { if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); handleSelectRoadmap(roadmap.sessionId); } }}
                    >
                      <div className="sv-roadmap-card__header">
                        <h3 className="sv-roadmap-card__title">{roadmap.title}</h3>
                        <span className="sv-roadmap-card__badge">{roadmap.experienceLevel}</span>
                      </div>
                      
                      <p className="sv-roadmap-card__goal">{roadmap.originalGoal}</p>
                      
                      <div className="sv-roadmap-card__stats">
                        <div className="sv-roadmap-card__stat">
                          <BookOpen size={16} />
                          <span>{roadmap.totalQuests} Nhi·ªám v·ª•</span>
                        </div>
                        <div className="sv-roadmap-card__stat">
                          <span>{roadmap.duration}</span>
                        </div>
                      </div>

                      <div className="sv-roadmap-card__progress">
                        <div className="sv-roadmap-card__progress-bar">
                          <div
                            className="sv-roadmap-card__progress-fill"
                            style={{ width: `${roadmap.progressPercentage}%` }}
                          />
                        </div>
                        <span className="sv-roadmap-card__progress-text">
                          {roadmap.completedQuests} / {roadmap.totalQuests} ƒë√£ xong ({roadmap.progressPercentage}%)
                        </span>
                      </div>

                      <div className="sv-roadmap-card__date">
                        T·∫°o ng√†y {new Date(roadmap.createdAt).toLocaleDateString('vi-VN')}
                      </div>
                    </button>
                  ))}
                </div>
              )}
            </div>
          )}

          {/* GENERATE VIEW - Show form */}
          {viewMode === 'generate' && (
            <RoadmapGeneratorForm
              onGenerate={handleGenerate}
              isLoading={isLoading}
              isAuthenticated={isAuthenticated}
              onLoginRedirect={() => navigate('/login')}
            />
          )}

          {/* VIEW ROADMAP - Show React Flow (V2 API) */}
          {viewMode === 'view' && selectedRoadmap && (
            <div className="roadmap-page__viewer">
              <div className="roadmap-page__viewer-info">
                <div className="roadmap-viewer__header">
                  <h2 className="roadmap-viewer__title">{selectedRoadmap.metadata.title}</h2>
                  {selectedRoadmap.metadata.difficultyLevel && (
                    <span className={`roadmap-viewer__badge roadmap-viewer__badge--${selectedRoadmap.metadata.difficultyLevel}`}>
                      {selectedRoadmap.metadata.difficultyLevel}
                    </span>
                  )}
                </div>
                
                <div className="roadmap-viewer__meta">
                  <div className="roadmap-viewer__meta-grid">
                    <div className="roadmap-viewer__meta-item">
                      <span className="roadmap-viewer__meta-label">üéØ M·ª•c ti√™u h·ªçc t·∫≠p:</span>
                      <span className="roadmap-viewer__meta-value">{selectedRoadmap.metadata.originalGoal}</span>
                    </div>
                    
                    {selectedRoadmap.metadata.validatedGoal && (
                      <div className="roadmap-viewer__meta-item">
                        <span className="roadmap-viewer__meta-label">‚úÖ M·ª•c ti√™u ƒë√£ x√°c nh·∫≠n:</span>
                        <span className="roadmap-viewer__meta-value">{selectedRoadmap.metadata.validatedGoal}</span>
                      </div>
                    )}
                    
                    <div className="roadmap-viewer__meta-item">
                      <span className="roadmap-viewer__meta-label">‚è±Ô∏è Th·ªùi l∆∞·ª£ng:</span>
                      <span className="roadmap-viewer__meta-value">{selectedRoadmap.metadata.duration}</span>
                    </div>
                    
                    <div className="roadmap-viewer__meta-item">
                      <span className="roadmap-viewer__meta-label">üìä C·∫•p ƒë·ªô kinh nghi·ªám:</span>
                      <span className="roadmap-viewer__meta-value">{selectedRoadmap.metadata.experienceLevel}</span>
                    </div>
                    
                    <div className="roadmap-viewer__meta-item">
                      <span className="roadmap-viewer__meta-label">üìö Phong c√°ch h·ªçc:</span>
                      <span className="roadmap-viewer__meta-value">{selectedRoadmap.metadata.learningStyle}</span>
                    </div>
                  </div>
                </div>

                {selectedRoadmap.metadata.validationNotes && 
                 selectedRoadmap.metadata.validationNotes !== 'null' && 
                 selectedRoadmap.metadata.validationNotes !== 'undefined' && (
                  <div className="roadmap-viewer__warnings">
                    <h4>üìã Ghi ch√∫ x√°c th·ª±c:</h4>
                    <ul>
                      {Array.isArray(selectedRoadmap.metadata.validationNotes) 
                        ? selectedRoadmap.metadata.validationNotes.map((note, idx) => (
                            <li key={idx}>{note}</li>
                          ))
                        : <li>{selectedRoadmap.metadata.validationNotes}</li>
                      }
                    </ul>
                  </div>
                )}

                {selectedRoadmap.statistics && (
                  <div className="roadmap-viewer__stats">
                    <div className="stat-item">
                      <span className="stat-label">T·ªïng s·ªë b∆∞·ªõc:</span>
                      <span className="stat-value">{selectedRoadmap.statistics.totalNodes}</span>
                    </div>
                    <div className="stat-item">
                      <span className="stat-label">Th·ªùi gian ∆∞·ªõc t√≠nh:</span>
                      <span className="stat-value">{selectedRoadmap.statistics.totalEstimatedHours.toFixed(1)}h</span>
                    </div>
                    <div className="stat-item">
                      <span className="stat-label">Nhi·ªám v·ª• ch√≠nh:</span>
                      <span className="stat-value">{selectedRoadmap.statistics.mainNodes}</span>
                    </div>
                    {selectedRoadmap.statistics.sideNodes > 0 && (
                      <div className="stat-item">
                        <span className="stat-label">Nhi·ªám v·ª• ph·ª•:</span>
                        <span className="stat-value">{selectedRoadmap.statistics.sideNodes}</span>
                      </div>
                    )}
                  </div>
                )}

                {selectedRoadmap.learningTips && (
                  <div className="roadmap-viewer__tips">
                    <h4>üí° G·ª£i √Ω h·ªçc t·∫≠p:</h4>
                    <ul>
                      {Array.isArray(selectedRoadmap.learningTips) 
                        ? selectedRoadmap.learningTips.map((tip, idx) => (
                            <li key={idx}>{tip}</li>
                          ))
                        : <li>{selectedRoadmap.learningTips}</li>
                      }
                    </ul>
                  </div>
                )}
              </div>

              <RoadmapFlow
                roadmap={selectedRoadmap.roadmap}
                progressMap={progressMap}
                onQuestComplete={handleQuestComplete}
              />
            </div>
          )}
        </div>
      </div>

      {/* Meowl Guide */}
      <MeowlGuide currentPage="roadmap" />

      {/* Toast Notification */}
      {toast && (
        <Toast
          type={toast.type}
          title={toast.title}
          message={toast.message}
          isVisible={isVisible}
          onClose={hideToast}
          autoCloseDelay={toast.autoCloseDelay}
          showCountdown={toast.showCountdown}
          countdownText={toast.countdownText}
          actionButton={toast.actionButton}
        />
      )}
    </div>
  );
};

export default RoadmapPage;
