import { useEffect, useState } from 'react';
import { useParams, useNavigate, useLocation } from 'react-router-dom';
import { 
  ArrowLeft, 
  Star, 
  Users, 
  Clock, 
  BookOpen, 
  Trophy, 
  Play,
  CheckCircle,
  Globe,
  Download,
  Share2,
  Heart,
  ChevronDown,
  ChevronUp,
  Target,
} from 'lucide-react';
import { useTheme } from '../../context/ThemeContext';
import { getCourse, isFreePrice, Course } from '../../services/courseService';
import { enrollUser, checkEnrollmentStatus, getEnrollmentProgress } from '../../services/enrollmentService';
import { CourseDetailDTO } from '../../data/courseDTOs';
import { getMentorProfile, MentorProfile } from '../../services/mentorProfileService';
import '../../styles/CourseraClone.css';

// Local helpers
const formatCurrency = (amount?: number, currency?: string): string => {
  if (!amount || amount === 0) return 'Mi·ªÖn ph√≠';
  if (currency && currency.toUpperCase() !== 'VND') {
    try {
      return new Intl.NumberFormat('en-US', { style: 'currency', currency }).format(amount);
    } catch {
      return amount.toLocaleString('vi-VN') + ' ' + currency;
    }
  }
  return amount.toLocaleString('vi-VN') + ' VND';
};

const CourseDetailPage = () => {
  const { theme } = useTheme();
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const location = useLocation();
  const [course, setCourse] = useState<CourseDetailDTO | null>(null);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('overview');
  const [expandedModule, setExpandedModule] = useState<number | null>(null);
  const [isWishlisted, setIsWishlisted] = useState(false);
  const [isEnrolled, setIsEnrolled] = useState(false);
  const [showTrailer, setShowTrailer] = useState(false);
  const [enrollmentProgress, setEnrollmentProgress] = useState(0);
  const [loadingEnrollment, setLoadingEnrollment] = useState(false);
  const [mentorProfile, setMentorProfile] = useState<MentorProfile | null>(null);

  // Check if course data was passed via navigation state
  const passedCourse = location.state?.course;

  // No mocks. All sections will be conditionally rendered from BE data.

  useEffect(() => {
    if (!id) {
      setLoading(false);
      return;
    }

    setLoading(true);
    const courseIdNum = parseInt(id);
    getCourse(courseIdNum)
      .then(async (dto) => {
        setCourse(dto);
        // Load mentor profile if available
        if (dto.author?.id) {
          try {
            const profile = await getMentorProfile(dto.author.id);
            setMentorProfile(profile);
          } catch {
            // ignore if not found
          }
        }
        // Enrollment status
        try {
          const enrolled = await checkEnrollmentStatus(courseIdNum, 1);
          setIsEnrolled(enrolled);
          if (enrolled) {
            const progress = await getEnrollmentProgress(courseIdNum, 1);
            setEnrollmentProgress(progress.progress);
          }
        } catch {
          // ignore
        }
      })
      .catch(err => {
        console.error('Error loading course:', err);
      })
      .finally(() => setLoading(false));
  }, [id]);

  const handleEnroll = async () => {
    if (!course || loadingEnrollment) return;
    
    setLoadingEnrollment(true);
    
    try {
      if (!course.price || course.price === 0) {
        // Handle free course enrollment
        await enrollUser(course.id, 1, 'FREE'); // TODO: Get real user ID from auth context
        setIsEnrolled(true);
        setEnrollmentProgress(0);
        alert('B·∫°n ƒë√£ ƒëƒÉng k√Ω th√†nh c√¥ng kh√≥a h·ªçc mi·ªÖn ph√≠!');
      } else {
        // Navigate to payment page with course data
        navigate('/payment', {
          state: {
            type: 'course',
            title: course.title,
            price: course.price,
            instructor: course.author?.fullName || `${course.author?.firstName} ${course.author?.lastName}`,
            description: course.description,
            image: course.thumbnailUrl || course.thumbnail?.url
          }
        });
      }
    } catch (error) {
      console.error('Error enrolling in course:', error);
      alert('C√≥ l·ªói x·∫£y ra khi ƒëƒÉng k√Ω kh√≥a h·ªçc. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setLoadingEnrollment(false);
    }
  };

  const handleTrailerPreview = () => {
    setShowTrailer(true);
  };

  const closeTrailer = () => {
    setShowTrailer(false);
  };

  const toggleModule = (moduleId: number) => {
    setExpandedModule(expandedModule === moduleId ? null : moduleId);
  };

  const formatStudentCount = (count: number): string => {
    const num = count || 0;
    if (num >= 1000) {
      return (num / 1000).toFixed(1) + 'k';
    }
    return num.toString();
  };

  if (loading) {
    return (
      <div className={`coursera-clone-container ${theme}`} data-theme={theme}>
        <div className="coursera-clone-loading-container">
          <div className="coursera-clone-loading-spinner"></div>
          <p>ƒêang t·∫£i th√¥ng tin kh√≥a h·ªçc...</p>
        </div>
      </div>
    );
  }

  if (!course) {
    return (
      <div className={`coursera-clone-container ${theme}`} data-theme={theme}>
        <div className="coursera-clone-error-container">
          <h2>Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc</h2>
          <button onClick={() => navigate('/courses')} className="coursera-clone-back-btn">
            Quay l·∫°i danh s√°ch kh√≥a h·ªçc
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className={`coursera-clone-container ${theme}`} data-theme={theme}>
      {/* Hero Section */}
      <div className="coursera-clone-hero">
        <div className="coursera-clone-hero-content">
          <button onClick={() => navigate(-1)} className="coursera-clone-back-btn">
            <ArrowLeft size={16} />
            <span>Quay l·∫°i</span>
          </button>

          <div className="coursera-clone-hero-grid">
            <div className="coursera-clone-course-info">
              <div className="coursera-clone-course-badges">
                {course.level && (
                  <span className="coursera-clone-badge coursera-clone-badge-level">
                    {course.level}
                  </span>
                )}
                {/* Category not available from BE yet */}
              </div>

              <h1 className="coursera-clone-course-title">{course.title}</h1>
              <p className="coursera-clone-course-description">{course.description}</p>

              <div className="coursera-clone-course-stats">
                <div className="coursera-clone-stat-item">
                  <Star className="coursera-clone-stat-icon filled" />
                  <span>{course.averageRating?.toFixed(1) ?? '0.0'}</span>
                </div>
                <div className="coursera-clone-stat-item">
                  <Users className="coursera-clone-stat-icon" />
                  <span>{formatStudentCount(course.enrollmentCount)} h·ªçc vi√™n</span>
                </div>
                {/* Duration not provided by BE; hide to avoid hardcode */}
                <div className="coursera-clone-stat-item">
                  <BookOpen className="coursera-clone-stat-icon" />
                  <span>{course.modules?.length ?? 0} m√¥-ƒëun</span>
                </div>
              </div>

              {course.author && (
                <div className="coursera-clone-instructor-info">
                  <img src={mentorProfile?.avatar || 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&fit=crop&crop=face'} alt={course.author.firstName} className="coursera-clone-instructor-avatar" />
                  <div className="coursera-clone-instructor-details">
                    <h4>{course.author.fullName || `${course.author.firstName} ${course.author.lastName}`}</h4>
                    {mentorProfile?.specialization && <p>{mentorProfile.specialization}</p>}
                  </div>
                </div>
              )}
            </div>

            <div className="coursera-clone-course-card">
              <div className="coursera-clone-course-preview">
                <img src={course.thumbnailUrl || (course.thumbnail?.url ?? '')} alt={course.title} className="coursera-clone-preview-image" />
                <div className="coursera-clone-preview-overlay">
                  <button 
                    className="coursera-clone-preview-btn"
                    onClick={handleTrailerPreview}
                  >
                    <Play size={16} />
                    <span>Xem trailer</span>
                  </button>
                </div>
              </div>

              <div className="coursera-clone-pricing-section">
                <div className="coursera-clone-price-info">
                  <h3 className="coursera-clone-price-current">{formatCurrency(course.price, course.currency)}</h3>
                </div>

                {isEnrolled ? (
                  <button 
                    className="coursera-clone-enroll-btn enrolled"
                    onClick={() => navigate('/course-learning', { state: { courseId: course.id } })}
                  >
                    üìö Ti·∫øp t·ª•c h·ªçc
                  </button>
                ) : (
                  <button 
                    className={`coursera-clone-enroll-btn ${loadingEnrollment ? 'loading' : ''}`}
                    onClick={handleEnroll}
                    disabled={loadingEnrollment}
                  >
                    {loadingEnrollment ? '‚è≥ ƒêang x·ª≠ l√Ω...' : (!course.price || course.price === 0 ? '‚ö° ƒêƒÉng k√Ω mi·ªÖn ph√≠' : '‚ö° ƒêƒÉng k√Ω ngay')}
                  </button>
                )}

                <div className="coursera-clone-action-buttons">
                  <button 
                    className={`coursera-clone-action-btn ${isWishlisted ? 'active' : ''}`}
                    onClick={() => setIsWishlisted(!isWishlisted)}
                  >
                    <Heart size={16} />
                    <span>{isWishlisted ? 'ƒê√£ l∆∞u' : 'L∆∞u'}</span>
                  </button>
                  <button className="coursera-clone-action-btn">
                    <Share2 size={16} />
                    <span>Chia s·∫ª</span>
                  </button>
                </div>
              </div>

              {/* Feature list is BE-dependent; hidden until BE provides */}
              
              {isEnrolled && (
                <div className="coursera-clone-enrollment-status">
                  <div className="coursera-clone-progress-section">
                    <h4 className="coursera-clone-progress-title">Ti·∫øn ƒë·ªô h·ªçc t·∫≠p</h4>
                    <div className="coursera-clone-progress-bar">
                      <div className="coursera-clone-progress-fill" style={{ width: `${enrollmentProgress}%` }}></div>
                    </div>
                    <span className="coursera-clone-progress-text">{enrollmentProgress}% ho√†n th√†nh</span>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Course Content */}
      <div className="coursera-clone-content">
        <div className="coursera-clone-content-layout">
          <div className="coursera-clone-main-content">
            {/* Navigation Tabs */}
            <div className="coursera-clone-content-tabs">
              <button 
                className={`coursera-clone-tab-btn ${activeTab === 'overview' ? 'active' : ''}`}
                onClick={() => setActiveTab('overview')}
              >
                T·ªïng quan
              </button>
              <button 
                className={`coursera-clone-tab-btn ${activeTab === 'curriculum' ? 'active' : ''}`}
                onClick={() => setActiveTab('curriculum')}
              >
                N·ªôi dung kh√≥a h·ªçc
              </button>
              <button 
                className={`coursera-clone-tab-btn ${activeTab === 'instructor' ? 'active' : ''}`}
                onClick={() => setActiveTab('instructor')}
              >
                Gi·∫£ng vi√™n
              </button>
              {Boolean(course.totalReviews && course.totalReviews > 0) && (
                <button 
                  className={`coursera-clone-tab-btn ${activeTab === 'reviews' ? 'active' : ''}`}
                  onClick={() => setActiveTab('reviews')}
                >
                  ƒê√°nh gi√°
                </button>
              )}
            </div>

            {/* Tab Content */}
            <div className="coursera-clone-tab-content">
              {activeTab === 'overview' && (
                <div className="coursera-clone-overview-section">
                  <h2 className="coursera-clone-section-title">M√¥ t·∫£ kh√≥a h·ªçc</h2>
                  <div className="coursera-clone-course-description-full">
                    <p>
                      {course.description} Kh√≥a h·ªçc n√†y ƒë∆∞·ª£c thi·∫øt k·∫ø d√†nh cho nh·ªØng ng∆∞·ªùi mu·ªën 
                      n·∫Øm v·ªØng c√°c ki·∫øn th·ª©c c∆° b·∫£n v√† n√¢ng cao, v·ªõi nhi·ªÅu v√≠ d·ª• th·ª±c t·∫ø v√† 
                      b√†i t·∫≠p th·ª±c h√†nh phong ph√∫.
                    </p>
                    <p>
                      B·∫°n s·∫Ω h·ªçc ƒë∆∞·ª£c c√°ch x√¢y d·ª±ng c√°c ·ª©ng d·ª•ng ho√†n ch·ªânh t·ª´ ƒë·∫ßu ƒë·∫øn cu·ªëi, 
                      hi·ªÉu r√µ c√°c best practices v√† c√°c k·ªπ thu·∫≠t t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t.
                    </p>
                  </div>

                  <h3 className="coursera-clone-subsection-title">B·∫°n s·∫Ω h·ªçc ƒë∆∞·ª£c g√¨?</h3>
                  <div className="coursera-clone-learning-outcomes">
                    <div className="coursera-clone-outcome-item">
                      <Target className="coursera-clone-outcome-icon" />
                      <span>N·∫Øm v·ªØng c√°c kh√°i ni·ªám c∆° b·∫£n v√† n√¢ng cao</span>
                    </div>
                    <div className="coursera-clone-outcome-item">
                      <Target className="coursera-clone-outcome-icon" />
                      <span>X√¢y d·ª±ng c√°c d·ª± √°n th·ª±c t·∫ø ho√†n ch·ªânh</span>
                    </div>
                    <div className="coursera-clone-outcome-item">
                      <Target className="coursera-clone-outcome-icon" />
                      <span>Hi·ªÉu v√† √°p d·ª•ng c√°c best practices</span>
                    </div>
                    <div className="coursera-clone-outcome-item">
                      <Target className="coursera-clone-outcome-icon" />
                      <span>T·ªëi ∆∞u h√≥a hi·ªáu su·∫•t v√† debug l·ªói</span>
                    </div>
                  </div>

                  <h3 className="coursera-clone-subsection-title">Y√™u c·∫ßu</h3>
                  <div className="coursera-clone-requirements">
                    <ul>
                      <li>Ki·∫øn th·ª©c c∆° b·∫£n v·ªÅ HTML, CSS v√† JavaScript</li>
                      <li>M√°y t√≠nh c√≥ th·ªÉ c√†i ƒë·∫∑t ph·∫ßn m·ªÅm ph√°t tri·ªÉn</li>
                      <li>ƒêam m√™ h·ªçc h·ªèi v√† th·ª±c h√†nh</li>
                    </ul>
                  </div>
                </div>
              )}

              {activeTab === 'curriculum' && (
                <div className="coursera-clone-curriculum-section">
                  <h2 className="coursera-clone-section-title">N·ªôi dung kh√≥a h·ªçc</h2>
                  {course.modules && course.modules.length > 0 ? (
                    <div className="coursera-clone-modules-list">
                      {course.modules.map((module, idx) => (
                        <div key={module.id} className="coursera-clone-module-item">
                          <div className="coursera-clone-module-header">
                            <div className="coursera-clone-module-info">
                              <div className="coursera-clone-module-number">{(module.orderIndex ?? idx) + 1}</div>
                              <div>
                                <h4 className="coursera-clone-module-title">{module.title}</h4>
                                {module.description && (
                                  <span className="coursera-clone-module-duration">{module.description}</span>
                                )}
                              </div>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <p>Ch∆∞a c√≥ n·ªôi dung.</p>
                  )}

                </div>
              )}

              {activeTab === 'instructor' && course.author && (
                <div className="coursera-clone-instructor-section">
                  <h2 className="coursera-clone-section-title">V·ªÅ gi·∫£ng vi√™n</h2>
                  <div className="coursera-clone-instructor-card">
                    <div className="coursera-clone-instructor-header">
                      <img src={mentorProfile?.avatar || 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&fit=crop&crop=face'} alt={course.author.firstName} className="coursera-clone-instructor-photo" />
                      <div className="coursera-clone-instructor-info-detailed">
                        <h3>{course.author.fullName || `${course.author.firstName} ${course.author.lastName}`}</h3>
                        {mentorProfile?.specialization && <p>{mentorProfile.specialization}</p>}
                      </div>
                    </div>
                    {mentorProfile?.bio && <p className="coursera-clone-instructor-bio">{mentorProfile.bio}</p>}
                  </div>
                </div>
              )}

              {activeTab === 'reviews' && Boolean(course.totalReviews && course.totalReviews > 0) && (
                <div className="coursera-clone-reviews-section">
                  <h2 className="coursera-clone-section-title">ƒê√°nh gi√° t·ª´ h·ªçc vi√™n</h2>
                  <div className="coursera-clone-reviews-summary">
                    <div className="coursera-clone-rating-overview">
                      <div className="coursera-clone-overall-rating">
                        <span className="coursera-clone-rating-number">{course.averageRating?.toFixed(1)}</span>
                        <div className="coursera-clone-rating-stars">
                          {[1, 2, 3, 4, 5].map((star) => (
                            <Star 
                              key={star} 
                              className={`star ${star <= Math.round(course.averageRating || 0) ? 'filled' : ''}`} 
                            />
                          ))}
                        </div>
                        <span className="coursera-clone-rating-count">{course.totalReviews} ƒë√°nh gi√°</span>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* Sidebar */}
          <div className="coursera-clone-content-sidebar">
            <div className="coursera-clone-sidebar-card">
              <h3 className="coursera-clone-sidebar-title">Chi ti·∫øt kh√≥a h·ªçc</h3>
              <div className="coursera-clone-course-details">
                <div className="coursera-clone-detail-item">
                  <BookOpen className="coursera-clone-detail-icon" />
                  <div className="coursera-clone-detail-info">
                    <span className="coursera-clone-detail-label">S·ªë m√¥-ƒëun</span>
                    <span className="coursera-clone-detail-value">{course.modules?.length ?? 0}</span>
                  </div>
                </div>
                {course.currency && (
                  <div className="coursera-clone-detail-item">
                    <div className="coursera-clone-detail-info">
                      <span className="coursera-clone-detail-label">Ti·ªÅn t·ªá</span>
                      <span className="coursera-clone-detail-value">{course.currency}</span>
                    </div>
                  </div>
                )}
              </div>
            </div>
            {/* Related courses hidden until BE provides */}
          </div>
        </div>
      </div>

      {/* Trailer Modal */}
      {showTrailer && (
        <div className="coursera-clone-trailer-modal" onClick={closeTrailer}>
          <div className="coursera-clone-trailer-content" onClick={(e) => e.stopPropagation()}>
            <button className="coursera-clone-trailer-close" onClick={closeTrailer}>
              √ó
            </button>
            <div className="coursera-clone-trailer-video">
              <img src={course.thumbnailUrl || (course.thumbnail?.url ?? '')} alt={course.title} />
              <div className="coursera-clone-trailer-overlay">
                <Play className="coursera-clone-trailer-play-icon" />
                <span>Video trailer s·∫Ω ƒë∆∞·ª£c ph√°t t·∫°i ƒë√¢y</span>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default CourseDetailPage;